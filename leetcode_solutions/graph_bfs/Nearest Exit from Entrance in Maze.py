"""
https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/description/
"""

# TODO

from typing import *


def nearestExit(maze: List[List[str]], entrance: List[int]) -> int:
    # check if the position is valid
    def valid(pos: List[int]):
        # print("valid:", pos)
        if 0 <= pos[0] < len(maze) and 0 <= pos[1] < len(maze[0]):
            if maze[pos[0]][pos[1]] != "+":
                if [pos[0], pos[1]] not in visited:
                    return True
        return False

    # check if exit reached
    def rexit(pos: List[int]):
        if pos == start:
            return False
        if pos[0] == 0 or pos[0] == len(maze)-1:
            if maze[pos[0]][pos[1]] != "+":
                return True
        if pos[1] == 0 or pos[1] == len(maze[0])-1:
            if maze[pos[0]][pos[1]] != "+":
                return True
        return False

    # stack to store the possible steps
    stack = []
    global start
    start = [entrance[0], entrance[1], 0]
    stack.append(start)
    # track visited areas
    global visited
    visited = []
    # current position coordinates
    pos = start
    path = -1

    # while loop with valid position and inside borders
    # if stack is empty, no valid moves available
    while stack:
        # # check if reached the exit
        # if rexit(pos):
        #     if pos[2] < path or path == -1:
        #         path = pos[2]
            # return pos[2]

        pos = stack.pop()
        visited.append([pos[0], pos[1]])
        print("pos", pos)
        print("visited", visited)
        print("stack", stack)
        # check possible moves up, down, left, right
        # up
        step = pos.copy();
        step[0] += 1;
        step[2] += 1;
        if valid(step):
            stack.append(step)
        # down
        step = pos.copy();
        step[0] -= 1;
        step[2] += 1;
        if valid(step):
            stack.append(step)
        # left
        step = pos.copy();
        step[1] -= 1;
        step[2] += 1;
        if valid(step):
            stack.append(step)
        # right
        step = pos.copy();
        step[1] += 1;
        step[2] += 1;
        if valid(step):
            stack.append(step)

        # if stack is empty, no valid moves available
        # if not stack:
        #     return -1
        # check if reached the exit
        if rexit(pos):
            print("pos[2]:", pos[2])
            if pos[2] < path or path == -1:
                path = pos[2]

    return path


m = [["+", "+", ".", "+"],
     [".", ".", ".", "+"],
     ["+", "+", ".", "."]]
e = [1, 0]
# m = [[".",".","+",".","+","+","+","+","+",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","+",".",".",".","+",".","+","+","+",".","+","+",".","+","+",".",".","+"],[".",".",".",".",".",".",".","+",".",".",".",".","+",".","+",".","+",".","+",".",".",".",".",".","+","+",".","+",".",".",".",".","+",".",".","+",".",".","+","+",".","+"],[".",".",".","+","+",".","+","+",".",".",".",".",".",".",".",".",".",".",".","+",".",".",".","+",".",".","+",".","+","+","+",".",".","+",".","+",".",".",".",".",".","+"],["+",".",".",".","+","+",".",".",".",".",".",".",".",".",".",".",".",".",".","+",".",".","+",".","+",".",".",".",".",".","+",".",".",".",".",".",".",".",".",".","+","."],[".","+",".",".","+",".",".","+",".","+",".",".",".","+",".",".",".",".",".","+",".","+",".",".","+",".",".","+",".",".",".",".",".","+","+","+","+",".",".",".",".","."],[".","+","+",".",".",".",".",".","+",".",".","+",".","+",".","+","+",".",".",".",".",".",".","+",".",".",".",".",".",".",".",".","+",".","+",".","+",".","+",".",".","+"],[".","+","+",".","+",".",".",".","+","+",".",".",".",".","+",".",".",".","+",".",".","+","+","+","+",".",".",".","+","+","+",".",".",".",".","+",".",".","+","+",".","+"],[".",".",".",".",".",".",".",".",".","+",".",".",".",".",".",".",".",".",".",".","+","+","+",".",".",".",".",".","+",".",".",".",".",".",".",".",".","+","+",".",".","."],[".",".",".",".","+",".",".",".",".","+","+",".",".",".","+","+",".",".","+",".",".","+",".",".",".",".",".",".","+","+",".",".",".",".",".",".",".",".",".",".",".","."],[".",".",".",".",".","+",".","+",".",".",".",".",".","+","+",".",".",".",".",".","+","+",".",".",".",".","+",".",".",".",".","+","+",".",".",".",".",".",".",".","+","."],["+",".",".",".",".",".",".",".",".",".",".","+",".","+",".",".","+","+",".",".",".","+",".",".","+","+",".",".","+","+","+","+",".","+","+","+",".","+",".",".",".","."],["+",".",".","+",".",".","+",".","+",".",".",".",".","+",".",".",".",".","+",".",".",".",".",".","+",".","+","+",".",".",".","+",".",".","+",".","+",".","+",".",".","."],[".","+",".",".",".","+",".",".",".","+",".","+",".",".",".",".",".",".",".","+","+",".",".",".",".",".",".","+","+","+",".",".",".",".","+",".",".",".",".",".",".","."],[".","+",".",".",".","+",".",".",".",".","+",".",".","+",".",".",".",".","+",".",".",".",".",".","+",".",".",".","+",".",".",".",".",".",".",".","+",".",".",".",".","+"],["+",".","+","+","+",".",".","+",".",".",".",".",".","+",".",".","+",".",".",".",".","+",".","+",".",".",".",".",".",".",".",".",".",".",".",".","+",".",".",".",".","+"],[".","+",".",".",".",".","+",".",".","+","+",".","+",".",".",".",".",".",".",".",".","+",".","+",".",".",".","+","+","+",".",".",".",".","+",".",".",".",".",".",".","."],["+",".",".","+",".",".",".",".",".",".",".",".",".",".",".","+",".","+","+","+","+",".","+","+","+","+",".",".",".",".",".",".",".",".",".",".",".",".","+",".","+","+"],["+","+",".",".","+",".",".","+",".",".",".",".",".",".","+","+","+",".","+","+",".",".",".",".",".",".",".",".","+",".",".",".","+",".",".",".",".","+",".","+","+","."],[".",".",".",".",".",".","+",".",".",".","+",".","+","+","+",".",".",".","+",".",".","+","+",".",".",".","+",".",".",".",".","+",".",".",".",".","+",".",".","+","+","."],["+",".","+","+",".",".",".",".",".",".",".",".",".",".",".","+","+",".",".","+",".",".",".","+",".",".",".",".",".","+",".",".",".",".",".",".",".",".",".","+",".","+"],[".",".",".",".",".",".",".",".",".","+",".",".","+","+",".",".","+","+","+",".",".",".",".","+",".","+",".","+",".",".","+","+",".",".","+","+",".",".",".",".",".","+"],[".",".","+",".","+",".",".",".",".","+",".",".",".",".",".",".","+",".",".",".","+","+","+",".","+",".",".","+",".","+","+","+",".",".","+","+","+",".",".",".",".","."],[".",".",".","+",".",".",".",".","+","+",".",".","+",".",".","+",".",".","+","+",".",".","+",".",".","+",".",".",".",".",".","+",".",".",".",".","+",".","+",".",".","."],[".","+",".","+",".",".",".",".",".","+","+","+",".","+",".",".",".",".",".",".","+",".",".","+",".",".",".",".",".",".",".",".",".",".","+",".",".",".",".","+",".","."],["+",".",".",".",".",".","+",".","+",".",".",".","+",".",".",".",".",".",".",".",".",".","+",".",".",".",".","+",".",".","+",".",".",".",".",".",".",".",".",".","+","+"],[".",".","+",".","+",".","+",".",".",".",".",".",".","+",".",".",".",".","+",".",".",".","+",".",".",".",".",".","+",".",".","+",".",".","+","+","+",".",".",".",".","."],[".",".",".","+","+","+","+",".","+",".",".","+","+","+","+","+",".",".",".",".",".",".",".","+",".",".",".","+","+",".",".","+",".",".","+",".",".","+",".",".",".","."],["+","+",".",".",".",".",".",".",".",".","+",".","+",".","+","+",".","+",".",".",".",".","+",".",".",".","+",".",".",".",".",".",".","+",".",".","+",".",".",".",".","."],[".","+","+",".",".",".",".",".",".",".",".","+",".",".","+","+",".",".",".",".",".",".",".","+",".",".","+",".","+",".",".","+",".","+",".",".",".",".","+","+","+","."],[".",".",".","+","+",".","+",".","+",".",".",".",".",".",".","+",".","+","+",".","+","+","+",".",".",".",".","+",".","+",".",".","+","+","+","+","+",".",".",".",".","."],[".",".",".",".",".",".",".",".","+",".","+",".",".",".",".",".",".",".","+",".",".",".","+",".",".",".",".","+",".",".","+","+",".",".","+","+",".","+",".",".",".","."],[".",".",".","+",".","+",".",".","+",".",".",".",".",".","+",".",".","+","+",".",".",".","+",".",".",".",".",".","+",".",".",".",".",".","+","+",".",".",".",".",".","+"],[".",".",".",".",".",".","+",".",".",".","+",".","+","+",".","+","+",".",".","+",".",".",".","+",".",".",".",".",".",".",".",".",".","+",".",".","+",".",".",".",".","."],["+",".",".",".",".",".",".","+",".",".","+",".",".","+",".",".","+",".","+",".",".","+","+",".",".",".","+","+","+",".",".","+",".",".",".",".",".",".","+",".","+","."],["+",".",".",".",".",".","+",".","+","+",".",".",".",".","+","+",".",".",".",".","+","+",".",".",".","+",".",".",".","+","+",".",".",".",".",".",".","+",".","+",".","."],[".","+",".",".",".",".","+","+","+",".",".",".",".",".",".",".","+",".",".",".",".",".",".","+",".","+",".",".","+",".","+",".",".",".",".",".",".",".",".",".",".","."],[".","+",".","+",".","+","+",".",".",".",".",".","+",".",".",".",".",".",".",".",".",".",".",".","+","+",".","+",".",".","+",".","+",".",".","+",".",".",".","+",".","+"],[".",".",".","+",".",".","+",".",".",".","+",".",".",".",".",".","+",".",".",".",".",".","+",".",".",".",".","+",".",".","+","+","+",".",".","+",".",".",".",".",".","+"],["+","+",".",".",".",".",".","+",".","+",".",".",".",".",".",".",".",".",".",".",".",".","+",".",".",".",".",".","+",".",".","+","+",".",".",".",".",".",".",".","+","."],[".",".",".","+",".",".","+","+",".",".",".",".",".",".",".",".","+",".","+",".",".",".","+",".",".","+",".","+",".",".",".",".","+",".",".",".",".","+","+","+",".","."],[".",".",".",".","+",".","+","+",".",".",".",".",".",".",".","+",".","+",".",".","+",".","+",".",".",".",".","+",".","+",".",".","+",".",".","+",".","+",".",".","+","."],[".","+",".","+",".",".",".",".",".",".","+",".","+",".",".",".",".",".",".","+",".",".","+","+","+","+","+",".","+",".","+",".",".","+","+",".","+",".","+",".","+","+"],[".",".",".","+",".",".",".",".",".",".","+","+",".",".","+",".",".",".",".",".",".",".","+",".","+","+",".",".",".",".",".",".",".",".",".",".","+",".",".",".",".","."],[".",".","+",".","+",".","+",".",".","+",".","+","+",".","+",".",".",".","+",".",".","+",".",".",".","+",".","+",".",".",".",".","+",".",".",".","+",".","+","+",".","."],[".",".",".","+","+","+",".",".",".",".",".",".","+","+","+",".","+",".",".","+","+","+","+","+",".",".",".",".","+","+","+",".","+",".",".",".",".",".","+",".","+","."],[".",".",".",".","+",".",".",".",".",".",".","+",".","+",".",".",".","+",".",".","+",".",".",".",".","+",".",".",".",".",".",".","+",".",".",".",".","+",".","+","+","."],["+","+",".",".",".","+",".","+",".",".",".","+",".","+",".","+",".","+",".",".",".",".","+",".","+",".","+",".","+","+",".","+",".",".",".",".",".",".","+",".","+","+"],[".",".","+","+",".",".",".",".",".",".",".","+",".",".",".",".",".",".",".",".",".",".",".",".",".",".","+","+",".",".",".",".","+","+",".",".","+",".","+","+",".","+"],[".",".",".",".",".",".","+",".",".",".",".","+",".","+",".",".",".","+","+","+",".","+",".","+","+",".",".",".",".","+","+","+",".",".","+","+",".",".",".",".","+","+"]]
# e = [47, 29]

print(nearestExit(m, e))
# print(m[47][29])